********************README**************************
Sofia Kafritsa Georganta
Assignment 8
****************************************************

            Buffer overflow exploitation

The idea of my solution is:

Step 1
    Using GDB I ran the program Greeter, setting a breakpoint on 0x080488f7, which is the leave 
    address in readString. Using too many "A"s as input, I typed 'info frame' to see the addresses on the 
    stack. I noted down $eip address and then by printing $esp, I found out the address that the buffer with 
    the "A"s starts. I p/d $eip-$address_start, and I concluded that I need to fill 48 bytes of memory to 
    exploit my program.

Step 2
    I found on internet a shellcode that spawns a terminal shell and I tested it with shell_tester.c. I also 
    altered Makefile to include the commands I used.

Step 3
    My exploit.py file creates the input_file.txt, which we will use to run Greeter.
    I had to look for the address 0x80dacc0 that the global variable 'Name' is stored in (I used some bytes more at ret_addr).
    I did some padding {"\x90" * (buf_len-len(payload)) and NOP = "\x90" * 16}, so that padding + payload + NOP + EIP = 48.
    Finally, I generated the input_file.txt 
    
How to run this program:
    1) Type python exploit.py 
    2) Type (cat ./input_file.txt; cat) | ./Greeter
